package java1607;

/*
	01	什么是并发
		并行运行多个程序或并行运行一个程序中多个部分如果程序中的耗时任务
		能够异步或并行的方式运行，那么整个程序的吞吐量和可交互性将大大改善。
	02	进程 vs 线程
		1,	进程间相互隔离
		2,	进程的资源(内存和CPU时间片)都是由操作系统来分配的
		3,	每个线程有自己独立的调用栈。
		4,	同一进程下的线程能够相互访问它们间的共享数据。
		5,	每个线程都有它独自的缓存。如果一个线程读取了某写共享数据，
			那么它将这些数据存放在自己的缓存中以共将来再次读取。
		6,	一个Java应用程序默认以一个进程的形式运行。在一个Java程序中，
			协同多个不同的线程一起完成并行运算或实现异步行为。
	03	并发的上限
		并发能够更快的原因是：任务分组成多个子任务，并且这些子任务被并行〕
		执行。一个任务的实际运行效率将受限于该任务中能并行执行的部分。
		Amadhl定律：
			设F为一个程序中不能并发执行的百分比，N是处理器的数量，理论上
		该程序能够获得的最高并发性能将可能是 1/(F+((1-F)/N))
	04	并发问题
		线程有独自的调用栈，但是又能够相互访问共享的数据。
		两个问题：可见性和访问
		可见性：如果线程A先读取了某些共享数据，之后线程B对这些数据进行了修改
			，那么线程A可能看不到线程B对这数据的改动
		访问问题：产生于多个线程同时访问修改同一个共享数据。
		可见性和访问问题将导致：
		a,	活跃性失败　---	由于并发访问导致程序无任何反应。譬如，死锁
		b,	安全性失败　---	 程序创建了错误的数据
*/


public class 一篇就看懂Java并发编程是怎么回事 {
	
}
